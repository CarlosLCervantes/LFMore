#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="LeetRaids")]
	public partial class LeetRaidsDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMemGame(MemGame instance);
    partial void UpdateMemGame(MemGame instance);
    partial void DeleteMemGame(MemGame instance);
    partial void InsertFaction(Faction instance);
    partial void UpdateFaction(Faction instance);
    partial void DeleteFaction(Faction instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertServer(Server instance);
    partial void UpdateServer(Server instance);
    partial void DeleteServer(Server instance);
    partial void InsertEventGroup(EventGroup instance);
    partial void UpdateEventGroup(EventGroup instance);
    partial void DeleteEventGroup(EventGroup instance);
    partial void InsertEventGroupSubType(EventGroupSubType instance);
    partial void UpdateEventGroupSubType(EventGroupSubType instance);
    partial void DeleteEventGroupSubType(EventGroupSubType instance);
    partial void InsertClass(Class instance);
    partial void UpdateClass(Class instance);
    partial void DeleteClass(Class instance);
    partial void InsertClassRole(ClassRole instance);
    partial void UpdateClassRole(ClassRole instance);
    partial void DeleteClassRole(ClassRole instance);
    partial void InsertMemCharacterRole(MemCharacterRole instance);
    partial void UpdateMemCharacterRole(MemCharacterRole instance);
    partial void DeleteMemCharacterRole(MemCharacterRole instance);
    partial void InsertRoleRestriction(RoleRestriction instance);
    partial void UpdateRoleRestriction(RoleRestriction instance);
    partial void DeleteRoleRestriction(RoleRestriction instance);
    partial void InsertMemFriend(MemFriend instance);
    partial void UpdateMemFriend(MemFriend instance);
    partial void DeleteMemFriend(MemFriend instance);
    partial void InsertEventAttendee(EventAttendee instance);
    partial void UpdateEventAttendee(EventAttendee instance);
    partial void DeleteEventAttendee(EventAttendee instance);
    partial void InsertEventRestriction(EventRestriction instance);
    partial void UpdateEventRestriction(EventRestriction instance);
    partial void DeleteEventRestriction(EventRestriction instance);
    partial void InsertMember(Member instance);
    partial void UpdateMember(Member instance);
    partial void DeleteMember(Member instance);
    partial void InsertMemCharacter(MemCharacter instance);
    partial void UpdateMemCharacter(MemCharacter instance);
    partial void DeleteMemCharacter(MemCharacter instance);
    partial void InsertInvite(Invite instance);
    partial void UpdateInvite(Invite instance);
    partial void DeleteInvite(Invite instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertEventType(EventType instance);
    partial void UpdateEventType(EventType instance);
    partial void DeleteEventType(EventType instance);
    #endregion
		
		public LeetRaidsDBDataContext() : 
				base(global::DataAccessLayer.Properties.Settings.Default.LeetRaidsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LeetRaidsDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LeetRaidsDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LeetRaidsDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LeetRaidsDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<MemGame> MemGames
		{
			get
			{
				return this.GetTable<MemGame>();
			}
		}
		
		public System.Data.Linq.Table<Faction> Factions
		{
			get
			{
				return this.GetTable<Faction>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<Server> Servers
		{
			get
			{
				return this.GetTable<Server>();
			}
		}
		
		public System.Data.Linq.Table<EventGroup> EventGroups
		{
			get
			{
				return this.GetTable<EventGroup>();
			}
		}
		
		public System.Data.Linq.Table<EventGroupSubType> EventGroupSubTypes
		{
			get
			{
				return this.GetTable<EventGroupSubType>();
			}
		}
		
		public System.Data.Linq.Table<Class> Classes
		{
			get
			{
				return this.GetTable<Class>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<ClassRole> ClassRoles
		{
			get
			{
				return this.GetTable<ClassRole>();
			}
		}
		
		public System.Data.Linq.Table<MemCharacterRole> MemCharacterRoles
		{
			get
			{
				return this.GetTable<MemCharacterRole>();
			}
		}
		
		public System.Data.Linq.Table<RoleRestriction> RoleRestrictions
		{
			get
			{
				return this.GetTable<RoleRestriction>();
			}
		}
		
		public System.Data.Linq.Table<MemFriend> MemFriends
		{
			get
			{
				return this.GetTable<MemFriend>();
			}
		}
		
		public System.Data.Linq.Table<EventAttendee> EventAttendees
		{
			get
			{
				return this.GetTable<EventAttendee>();
			}
		}
		
		public System.Data.Linq.Table<EventRestriction> EventRestrictions
		{
			get
			{
				return this.GetTable<EventRestriction>();
			}
		}
		
		public System.Data.Linq.Table<Member> Members
		{
			get
			{
				return this.GetTable<Member>();
			}
		}
		
		public System.Data.Linq.Table<MemCharacter> MemCharacters
		{
			get
			{
				return this.GetTable<MemCharacter>();
			}
		}
		
		public System.Data.Linq.Table<Invite> Invites
		{
			get
			{
				return this.GetTable<Invite>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<EventType> EventTypes
		{
			get
			{
				return this.GetTable<EventType>();
			}
		}
		
		[Function(Name="dbo.SearchCharacters")]
		public ISingleResult<SearchCharactersResult> SearchCharacters([Parameter(DbType="Int")] System.Nullable<int> gameID, [Parameter(DbType="VarChar(50)")] string name, [Parameter(DbType="Int")] System.Nullable<int> classID, [Parameter(DbType="Int")] System.Nullable<int> roleID, [Parameter(DbType="Int")] System.Nullable<int> factionID, [Parameter(DbType="Int")] System.Nullable<int> serverID, [Parameter(DbType="Int")] System.Nullable<int> levelMin, [Parameter(DbType="Int")] System.Nullable<int> levelMax)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), gameID, name, classID, roleID, factionID, serverID, levelMin, levelMax);
			return ((ISingleResult<SearchCharactersResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.SearchEvents")]
		public ISingleResult<SearchEventsResult> SearchEvents([Parameter(DbType="Int")] System.Nullable<int> gameID, [Parameter(DbType="VarChar(50)")] string searchTerm, [Parameter(DbType="Bit")] System.Nullable<bool> showFullEvents, [Parameter(DbType="VarChar(50)")] string eventName, [Parameter(DbType="VarChar(50)")] string eventCreator, [Parameter(DbType="VarChar(50)")] string eventTypeName, [Parameter(DbType="Int")] System.Nullable<int> serverID, [Parameter(DbType="Date")] System.Nullable<System.DateTime> eventStartDate, [Parameter(DbType="Date")] System.Nullable<System.DateTime> eventEndDate, [Parameter(DbType="Time")] System.Nullable<System.TimeSpan> eventStartTime, [Parameter(DbType="Time")] System.Nullable<System.TimeSpan> eventEndTime, [Parameter(DbType="Int")] System.Nullable<int> eventGroupID, [Parameter(DbType="Int")] System.Nullable<int> eventSubGroupID, [Parameter(DbType="Int")] System.Nullable<int> eventTypeID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), gameID, searchTerm, showFullEvents, eventName, eventCreator, eventTypeName, serverID, eventStartDate, eventEndDate, eventStartTime, eventEndTime, eventGroupID, eventSubGroupID, eventTypeID);
			return ((ISingleResult<SearchEventsResult>)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.MemGames")]
	public partial class MemGame : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GamePlayedID;
		
		private int _MemberID;
		
		private int _GameID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGamePlayedIDChanging(int value);
    partial void OnGamePlayedIDChanged();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    #endregion
		
		public MemGame()
		{
			OnCreated();
		}
		
		[Column(Storage="_GamePlayedID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GamePlayedID
		{
			get
			{
				return this._GamePlayedID;
			}
			set
			{
				if ((this._GamePlayedID != value))
				{
					this.OnGamePlayedIDChanging(value);
					this.SendPropertyChanging();
					this._GamePlayedID = value;
					this.SendPropertyChanged("GamePlayedID");
					this.OnGamePlayedIDChanged();
				}
			}
		}
		
		[Column(Storage="_MemberID", DbType="Int NOT NULL")]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[Column(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Factions")]
	public partial class Faction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FactionID;
		
		private int _GameID;
		
		private string _FactionName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFactionIDChanging(int value);
    partial void OnFactionIDChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnFactionNameChanging(string value);
    partial void OnFactionNameChanged();
    #endregion
		
		public Faction()
		{
			OnCreated();
		}
		
		[Column(Storage="_FactionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FactionID
		{
			get
			{
				return this._FactionID;
			}
			set
			{
				if ((this._FactionID != value))
				{
					this.OnFactionIDChanging(value);
					this.SendPropertyChanging();
					this._FactionID = value;
					this.SendPropertyChanged("FactionID");
					this.OnFactionIDChanged();
				}
			}
		}
		
		[Column(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[Column(Storage="_FactionName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FactionName
		{
			get
			{
				return this._FactionName;
			}
			set
			{
				if ((this._FactionName != value))
				{
					this.OnFactionNameChanging(value);
					this.SendPropertyChanging();
					this._FactionName = value;
					this.SendPropertyChanged("FactionName");
					this.OnFactionNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Games")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GameID;
		
		private string _GameName;
		
		private bool _Enabled;
		
		private string _ImageName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnGameNameChanging(string value);
    partial void OnGameNameChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    partial void OnImageNameChanging(string value);
    partial void OnImageNameChanged();
    #endregion
		
		public Game()
		{
			OnCreated();
		}
		
		[Column(Storage="_GameID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[Column(Storage="_GameName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GameName
		{
			get
			{
				return this._GameName;
			}
			set
			{
				if ((this._GameName != value))
				{
					this.OnGameNameChanging(value);
					this.SendPropertyChanging();
					this._GameName = value;
					this.SendPropertyChanged("GameName");
					this.OnGameNameChanged();
				}
			}
		}
		
		[Column(Storage="_Enabled", DbType="Bit NOT NULL")]
		public bool Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[Column(Storage="_ImageName", DbType="VarChar(50)")]
		public string ImageName
		{
			get
			{
				return this._ImageName;
			}
			set
			{
				if ((this._ImageName != value))
				{
					this.OnImageNameChanging(value);
					this.SendPropertyChanging();
					this._ImageName = value;
					this.SendPropertyChanged("ImageName");
					this.OnImageNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Servers")]
	public partial class Server : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServerID;
		
		private string _Name;
		
		private System.Nullable<int> _RegionID;
		
		private System.Nullable<int> _GameID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServerIDChanging(int value);
    partial void OnServerIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRegionIDChanging(System.Nullable<int> value);
    partial void OnRegionIDChanged();
    partial void OnGameIDChanging(System.Nullable<int> value);
    partial void OnGameIDChanged();
    #endregion
		
		public Server()
		{
			OnCreated();
		}
		
		[Column(Storage="_ServerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ServerID
		{
			get
			{
				return this._ServerID;
			}
			set
			{
				if ((this._ServerID != value))
				{
					this.OnServerIDChanging(value);
					this.SendPropertyChanging();
					this._ServerID = value;
					this.SendPropertyChanged("ServerID");
					this.OnServerIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_RegionID", DbType="Int")]
		public System.Nullable<int> RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[Column(Storage="_GameID", DbType="Int")]
		public System.Nullable<int> GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.EventGroups")]
	public partial class EventGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventGroupID;
		
		private int _GameID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventGroupIDChanging(int value);
    partial void OnEventGroupIDChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public EventGroup()
		{
			OnCreated();
		}
		
		[Column(Storage="_EventGroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventGroupID
		{
			get
			{
				return this._EventGroupID;
			}
			set
			{
				if ((this._EventGroupID != value))
				{
					this.OnEventGroupIDChanging(value);
					this.SendPropertyChanging();
					this._EventGroupID = value;
					this.SendPropertyChanged("EventGroupID");
					this.OnEventGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.EventGroupSubTypes")]
	public partial class EventGroupSubType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventGroupSubTypeID;
		
		private int _EventGroupID;
		
		private string _Name;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventGroupSubTypeIDChanging(int value);
    partial void OnEventGroupSubTypeIDChanged();
    partial void OnEventGroupIDChanging(int value);
    partial void OnEventGroupIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public EventGroupSubType()
		{
			OnCreated();
		}
		
		[Column(Storage="_EventGroupSubTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventGroupSubTypeID
		{
			get
			{
				return this._EventGroupSubTypeID;
			}
			set
			{
				if ((this._EventGroupSubTypeID != value))
				{
					this.OnEventGroupSubTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EventGroupSubTypeID = value;
					this.SendPropertyChanged("EventGroupSubTypeID");
					this.OnEventGroupSubTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_EventGroupID", DbType="Int NOT NULL")]
		public int EventGroupID
		{
			get
			{
				return this._EventGroupID;
			}
			set
			{
				if ((this._EventGroupID != value))
				{
					this.OnEventGroupIDChanging(value);
					this.SendPropertyChanging();
					this._EventGroupID = value;
					this.SendPropertyChanged("EventGroupID");
					this.OnEventGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Classes")]
	public partial class Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClassID;
		
		private int _GameID;
		
		private string _ClassName;
		
		private System.Nullable<int> _FactionID;
		
		private string _ImageLocation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassIDChanging(int value);
    partial void OnClassIDChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnClassNameChanging(string value);
    partial void OnClassNameChanged();
    partial void OnFactionIDChanging(System.Nullable<int> value);
    partial void OnFactionIDChanged();
    partial void OnImageLocationChanging(string value);
    partial void OnImageLocationChanged();
    #endregion
		
		public Class()
		{
			OnCreated();
		}
		
		[Column(Storage="_ClassID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClassID
		{
			get
			{
				return this._ClassID;
			}
			set
			{
				if ((this._ClassID != value))
				{
					this.OnClassIDChanging(value);
					this.SendPropertyChanging();
					this._ClassID = value;
					this.SendPropertyChanged("ClassID");
					this.OnClassIDChanged();
				}
			}
		}
		
		[Column(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[Column(Storage="_ClassName", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}
		
		[Column(Storage="_FactionID", DbType="Int")]
		public System.Nullable<int> FactionID
		{
			get
			{
				return this._FactionID;
			}
			set
			{
				if ((this._FactionID != value))
				{
					this.OnFactionIDChanging(value);
					this.SendPropertyChanging();
					this._FactionID = value;
					this.SendPropertyChanged("FactionID");
					this.OnFactionIDChanged();
				}
			}
		}
		
		[Column(Storage="_ImageLocation", DbType="VarChar(50)")]
		public string ImageLocation
		{
			get
			{
				return this._ImageLocation;
			}
			set
			{
				if ((this._ImageLocation != value))
				{
					this.OnImageLocationChanging(value);
					this.SendPropertyChanging();
					this._ImageLocation = value;
					this.SendPropertyChanged("ImageLocation");
					this.OnImageLocationChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Roles")]
	public partial class Role
	{
		
		private int _RoleID;
		
		private int _GameID;
		
		private string _RoleName;
		
		private string _ImageLocation;
		
		public Role()
		{
		}
		
		[Column(Storage="_RoleID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
		
		[Column(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this._GameID = value;
				}
			}
		}
		
		[Column(Storage="_RoleName", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this._RoleName = value;
				}
			}
		}
		
		[Column(Storage="_ImageLocation", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ImageLocation
		{
			get
			{
				return this._ImageLocation;
			}
			set
			{
				if ((this._ImageLocation != value))
				{
					this._ImageLocation = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.ClassRoles")]
	public partial class ClassRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClassRoleID;
		
		private int _ClassID;
		
		private int _RoleID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassRoleIDChanging(int value);
    partial void OnClassRoleIDChanged();
    partial void OnClassIDChanging(int value);
    partial void OnClassIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    #endregion
		
		public ClassRole()
		{
			OnCreated();
		}
		
		[Column(Storage="_ClassRoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClassRoleID
		{
			get
			{
				return this._ClassRoleID;
			}
			set
			{
				if ((this._ClassRoleID != value))
				{
					this.OnClassRoleIDChanging(value);
					this.SendPropertyChanging();
					this._ClassRoleID = value;
					this.SendPropertyChanged("ClassRoleID");
					this.OnClassRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_ClassID", DbType="Int NOT NULL")]
		public int ClassID
		{
			get
			{
				return this._ClassID;
			}
			set
			{
				if ((this._ClassID != value))
				{
					this.OnClassIDChanging(value);
					this.SendPropertyChanging();
					this._ClassID = value;
					this.SendPropertyChanged("ClassID");
					this.OnClassIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MemCharacterRoles")]
	public partial class MemCharacterRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemCharacterRoleID;
		
		private int _CharacterID;
		
		private int _RoleID;
		
		private System.Nullable<System.DateTime> _LastModified;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemCharacterRoleIDChanging(int value);
    partial void OnMemCharacterRoleIDChanged();
    partial void OnCharacterIDChanging(int value);
    partial void OnCharacterIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    #endregion
		
		public MemCharacterRole()
		{
			OnCreated();
		}
		
		[Column(Storage="_MemCharacterRoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MemCharacterRoleID
		{
			get
			{
				return this._MemCharacterRoleID;
			}
			set
			{
				if ((this._MemCharacterRoleID != value))
				{
					this.OnMemCharacterRoleIDChanging(value);
					this.SendPropertyChanging();
					this._MemCharacterRoleID = value;
					this.SendPropertyChanged("MemCharacterRoleID");
					this.OnMemCharacterRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_CharacterID", DbType="Int NOT NULL")]
		public int CharacterID
		{
			get
			{
				return this._CharacterID;
			}
			set
			{
				if ((this._CharacterID != value))
				{
					this.OnCharacterIDChanging(value);
					this.SendPropertyChanging();
					this._CharacterID = value;
					this.SendPropertyChanged("CharacterID");
					this.OnCharacterIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.RoleRestrictions")]
	public partial class RoleRestriction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleRestrictionID;
		
		private int _RestrictionID;
		
		private int _RoleID;
		
		private int _Quantity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleRestrictionIDChanging(int value);
    partial void OnRoleRestrictionIDChanged();
    partial void OnRestrictionIDChanging(int value);
    partial void OnRestrictionIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    #endregion
		
		public RoleRestriction()
		{
			OnCreated();
		}
		
		[Column(Storage="_RoleRestrictionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleRestrictionID
		{
			get
			{
				return this._RoleRestrictionID;
			}
			set
			{
				if ((this._RoleRestrictionID != value))
				{
					this.OnRoleRestrictionIDChanging(value);
					this.SendPropertyChanging();
					this._RoleRestrictionID = value;
					this.SendPropertyChanged("RoleRestrictionID");
					this.OnRoleRestrictionIDChanged();
				}
			}
		}
		
		[Column(Storage="_RestrictionID", DbType="Int NOT NULL")]
		public int RestrictionID
		{
			get
			{
				return this._RestrictionID;
			}
			set
			{
				if ((this._RestrictionID != value))
				{
					this.OnRestrictionIDChanging(value);
					this.SendPropertyChanging();
					this._RestrictionID = value;
					this.SendPropertyChanged("RestrictionID");
					this.OnRestrictionIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MemFriends")]
	public partial class MemFriend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemFriendsID;
		
		private int _MemberID;
		
		private int _FriendCharacterID;
		
		private string _Note;
		
		private System.DateTime _AddDateTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemFriendsIDChanging(int value);
    partial void OnMemFriendsIDChanged();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnFriendCharacterIDChanging(int value);
    partial void OnFriendCharacterIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnAddDateTimeChanging(System.DateTime value);
    partial void OnAddDateTimeChanged();
    #endregion
		
		public MemFriend()
		{
			OnCreated();
		}
		
		[Column(Storage="_MemFriendsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MemFriendsID
		{
			get
			{
				return this._MemFriendsID;
			}
			set
			{
				if ((this._MemFriendsID != value))
				{
					this.OnMemFriendsIDChanging(value);
					this.SendPropertyChanging();
					this._MemFriendsID = value;
					this.SendPropertyChanged("MemFriendsID");
					this.OnMemFriendsIDChanged();
				}
			}
		}
		
		[Column(Storage="_MemberID", DbType="Int NOT NULL")]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[Column(Storage="_FriendCharacterID", DbType="Int NOT NULL")]
		public int FriendCharacterID
		{
			get
			{
				return this._FriendCharacterID;
			}
			set
			{
				if ((this._FriendCharacterID != value))
				{
					this.OnFriendCharacterIDChanging(value);
					this.SendPropertyChanging();
					this._FriendCharacterID = value;
					this.SendPropertyChanged("FriendCharacterID");
					this.OnFriendCharacterIDChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Column(Storage="_AddDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime AddDateTime
		{
			get
			{
				return this._AddDateTime;
			}
			set
			{
				if ((this._AddDateTime != value))
				{
					this.OnAddDateTimeChanging(value);
					this.SendPropertyChanging();
					this._AddDateTime = value;
					this.SendPropertyChanged("AddDateTime");
					this.OnAddDateTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.EventAttendees")]
	public partial class EventAttendee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AttendeeID;
		
		private int _EventID;
		
		private int _MemberID;
		
		private int _CharacterID;
		
		private System.Nullable<int> _RoleID;
		
		private int _Status;
		
		private string _Note;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttendeeIDChanging(int value);
    partial void OnAttendeeIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnCharacterIDChanging(int value);
    partial void OnCharacterIDChanged();
    partial void OnRoleIDChanging(System.Nullable<int> value);
    partial void OnRoleIDChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public EventAttendee()
		{
			OnCreated();
		}
		
		[Column(Storage="_AttendeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AttendeeID
		{
			get
			{
				return this._AttendeeID;
			}
			set
			{
				if ((this._AttendeeID != value))
				{
					this.OnAttendeeIDChanging(value);
					this.SendPropertyChanging();
					this._AttendeeID = value;
					this.SendPropertyChanged("AttendeeID");
					this.OnAttendeeIDChanged();
				}
			}
		}
		
		[Column(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[Column(Storage="_MemberID", DbType="Int NOT NULL")]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[Column(Storage="_CharacterID", DbType="Int NOT NULL")]
		public int CharacterID
		{
			get
			{
				return this._CharacterID;
			}
			set
			{
				if ((this._CharacterID != value))
				{
					this.OnCharacterIDChanging(value);
					this.SendPropertyChanging();
					this._CharacterID = value;
					this.SendPropertyChanged("CharacterID");
					this.OnCharacterIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="Int")]
		public System.Nullable<int> RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="VarChar(150)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.EventRestrictions")]
	public partial class EventRestriction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventRestrictionsID;
		
		private int _EventID;
		
		private System.Nullable<int> _ClassRestrictionID;
		
		private System.Nullable<int> _RoleRestrictionID;
		
		private System.Nullable<int> _PlayerQuantityRestriction;
		
		private System.Nullable<int> _FactionID;
		
		private System.Nullable<int> _ServerID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventRestrictionsIDChanging(int value);
    partial void OnEventRestrictionsIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnClassRestrictionIDChanging(System.Nullable<int> value);
    partial void OnClassRestrictionIDChanged();
    partial void OnRoleRestrictionIDChanging(System.Nullable<int> value);
    partial void OnRoleRestrictionIDChanged();
    partial void OnPlayerQuantityRestrictionChanging(System.Nullable<int> value);
    partial void OnPlayerQuantityRestrictionChanged();
    partial void OnFactionIDChanging(System.Nullable<int> value);
    partial void OnFactionIDChanged();
    partial void OnServerIDChanging(System.Nullable<int> value);
    partial void OnServerIDChanged();
    #endregion
		
		public EventRestriction()
		{
			OnCreated();
		}
		
		[Column(Storage="_EventRestrictionsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventRestrictionsID
		{
			get
			{
				return this._EventRestrictionsID;
			}
			set
			{
				if ((this._EventRestrictionsID != value))
				{
					this.OnEventRestrictionsIDChanging(value);
					this.SendPropertyChanging();
					this._EventRestrictionsID = value;
					this.SendPropertyChanged("EventRestrictionsID");
					this.OnEventRestrictionsIDChanged();
				}
			}
		}
		
		[Column(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[Column(Storage="_ClassRestrictionID", DbType="Int")]
		public System.Nullable<int> ClassRestrictionID
		{
			get
			{
				return this._ClassRestrictionID;
			}
			set
			{
				if ((this._ClassRestrictionID != value))
				{
					this.OnClassRestrictionIDChanging(value);
					this.SendPropertyChanging();
					this._ClassRestrictionID = value;
					this.SendPropertyChanged("ClassRestrictionID");
					this.OnClassRestrictionIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleRestrictionID", DbType="Int")]
		public System.Nullable<int> RoleRestrictionID
		{
			get
			{
				return this._RoleRestrictionID;
			}
			set
			{
				if ((this._RoleRestrictionID != value))
				{
					this.OnRoleRestrictionIDChanging(value);
					this.SendPropertyChanging();
					this._RoleRestrictionID = value;
					this.SendPropertyChanged("RoleRestrictionID");
					this.OnRoleRestrictionIDChanged();
				}
			}
		}
		
		[Column(Storage="_PlayerQuantityRestriction", DbType="Int")]
		public System.Nullable<int> PlayerQuantityRestriction
		{
			get
			{
				return this._PlayerQuantityRestriction;
			}
			set
			{
				if ((this._PlayerQuantityRestriction != value))
				{
					this.OnPlayerQuantityRestrictionChanging(value);
					this.SendPropertyChanging();
					this._PlayerQuantityRestriction = value;
					this.SendPropertyChanged("PlayerQuantityRestriction");
					this.OnPlayerQuantityRestrictionChanged();
				}
			}
		}
		
		[Column(Storage="_FactionID", DbType="Int")]
		public System.Nullable<int> FactionID
		{
			get
			{
				return this._FactionID;
			}
			set
			{
				if ((this._FactionID != value))
				{
					this.OnFactionIDChanging(value);
					this.SendPropertyChanging();
					this._FactionID = value;
					this.SendPropertyChanged("FactionID");
					this.OnFactionIDChanged();
				}
			}
		}
		
		[Column(Storage="_ServerID", DbType="Int")]
		public System.Nullable<int> ServerID
		{
			get
			{
				return this._ServerID;
			}
			set
			{
				if ((this._ServerID != value))
				{
					this.OnServerIDChanging(value);
					this.SendPropertyChanging();
					this._ServerID = value;
					this.SendPropertyChanged("ServerID");
					this.OnServerIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Members")]
	public partial class Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemberID;
		
		private string _UserName;
		
		private string _Email;
		
		private string _Password;
		
		private System.Nullable<System.TimeSpan> _PlayTimeStart;
		
		private System.Nullable<System.TimeSpan> _PlayTimeEnd;
		
		private string _TimeZone;
		
		private System.DateTime _CreateDT;
		
		private bool _AgreedToTerms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPlayTimeStartChanging(System.Nullable<System.TimeSpan> value);
    partial void OnPlayTimeStartChanged();
    partial void OnPlayTimeEndChanging(System.Nullable<System.TimeSpan> value);
    partial void OnPlayTimeEndChanged();
    partial void OnTimeZoneChanging(string value);
    partial void OnTimeZoneChanged();
    partial void OnCreateDTChanging(System.DateTime value);
    partial void OnCreateDTChanged();
    partial void OnAgreedToTermsChanging(bool value);
    partial void OnAgreedToTermsChanged();
    #endregion
		
		public Member()
		{
			OnCreated();
		}
		
		[Column(Storage="_MemberID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_PlayTimeStart", DbType="Time")]
		public System.Nullable<System.TimeSpan> PlayTimeStart
		{
			get
			{
				return this._PlayTimeStart;
			}
			set
			{
				if ((this._PlayTimeStart != value))
				{
					this.OnPlayTimeStartChanging(value);
					this.SendPropertyChanging();
					this._PlayTimeStart = value;
					this.SendPropertyChanged("PlayTimeStart");
					this.OnPlayTimeStartChanged();
				}
			}
		}
		
		[Column(Storage="_PlayTimeEnd", DbType="Time")]
		public System.Nullable<System.TimeSpan> PlayTimeEnd
		{
			get
			{
				return this._PlayTimeEnd;
			}
			set
			{
				if ((this._PlayTimeEnd != value))
				{
					this.OnPlayTimeEndChanging(value);
					this.SendPropertyChanging();
					this._PlayTimeEnd = value;
					this.SendPropertyChanged("PlayTimeEnd");
					this.OnPlayTimeEndChanged();
				}
			}
		}
		
		[Column(Storage="_TimeZone", DbType="VarChar(20)")]
		public string TimeZone
		{
			get
			{
				return this._TimeZone;
			}
			set
			{
				if ((this._TimeZone != value))
				{
					this.OnTimeZoneChanging(value);
					this.SendPropertyChanging();
					this._TimeZone = value;
					this.SendPropertyChanged("TimeZone");
					this.OnTimeZoneChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDT", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDT
		{
			get
			{
				return this._CreateDT;
			}
			set
			{
				if ((this._CreateDT != value))
				{
					this.OnCreateDTChanging(value);
					this.SendPropertyChanging();
					this._CreateDT = value;
					this.SendPropertyChanged("CreateDT");
					this.OnCreateDTChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedToTerms", DbType="Bit NOT NULL")]
		public bool AgreedToTerms
		{
			get
			{
				return this._AgreedToTerms;
			}
			set
			{
				if ((this._AgreedToTerms != value))
				{
					this.OnAgreedToTermsChanging(value);
					this.SendPropertyChanging();
					this._AgreedToTerms = value;
					this.SendPropertyChanged("AgreedToTerms");
					this.OnAgreedToTermsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MemCharacters")]
	public partial class MemCharacter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CharacterID;
		
		private int _MemberID;
		
		private int _GameID;
		
		private int _ClassID;
		
		private System.Nullable<int> _FactionID;
		
		private string _CharacterName;
		
		private System.Nullable<int> _LVL;
		
		private System.Nullable<int> _ServerID;
		
		private System.Nullable<int> _RegionID;
		
		private System.DateTime _CreateDT;
		
		private System.DateTime _LastModifiedDT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCharacterIDChanging(int value);
    partial void OnCharacterIDChanged();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnClassIDChanging(int value);
    partial void OnClassIDChanged();
    partial void OnFactionIDChanging(System.Nullable<int> value);
    partial void OnFactionIDChanged();
    partial void OnCharacterNameChanging(string value);
    partial void OnCharacterNameChanged();
    partial void OnLVLChanging(System.Nullable<int> value);
    partial void OnLVLChanged();
    partial void OnServerIDChanging(System.Nullable<int> value);
    partial void OnServerIDChanged();
    partial void OnRegionIDChanging(System.Nullable<int> value);
    partial void OnRegionIDChanged();
    partial void OnCreateDTChanging(System.DateTime value);
    partial void OnCreateDTChanged();
    partial void OnLastModifiedDTChanging(System.DateTime value);
    partial void OnLastModifiedDTChanged();
    #endregion
		
		public MemCharacter()
		{
			OnCreated();
		}
		
		[Column(Storage="_CharacterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CharacterID
		{
			get
			{
				return this._CharacterID;
			}
			set
			{
				if ((this._CharacterID != value))
				{
					this.OnCharacterIDChanging(value);
					this.SendPropertyChanging();
					this._CharacterID = value;
					this.SendPropertyChanged("CharacterID");
					this.OnCharacterIDChanged();
				}
			}
		}
		
		[Column(Storage="_MemberID", DbType="Int NOT NULL")]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[Column(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[Column(Storage="_ClassID", DbType="Int NOT NULL")]
		public int ClassID
		{
			get
			{
				return this._ClassID;
			}
			set
			{
				if ((this._ClassID != value))
				{
					this.OnClassIDChanging(value);
					this.SendPropertyChanging();
					this._ClassID = value;
					this.SendPropertyChanged("ClassID");
					this.OnClassIDChanged();
				}
			}
		}
		
		[Column(Storage="_FactionID", DbType="Int")]
		public System.Nullable<int> FactionID
		{
			get
			{
				return this._FactionID;
			}
			set
			{
				if ((this._FactionID != value))
				{
					this.OnFactionIDChanging(value);
					this.SendPropertyChanging();
					this._FactionID = value;
					this.SendPropertyChanged("FactionID");
					this.OnFactionIDChanged();
				}
			}
		}
		
		[Column(Storage="_CharacterName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CharacterName
		{
			get
			{
				return this._CharacterName;
			}
			set
			{
				if ((this._CharacterName != value))
				{
					this.OnCharacterNameChanging(value);
					this.SendPropertyChanging();
					this._CharacterName = value;
					this.SendPropertyChanged("CharacterName");
					this.OnCharacterNameChanged();
				}
			}
		}
		
		[Column(Storage="_LVL", DbType="Int")]
		public System.Nullable<int> LVL
		{
			get
			{
				return this._LVL;
			}
			set
			{
				if ((this._LVL != value))
				{
					this.OnLVLChanging(value);
					this.SendPropertyChanging();
					this._LVL = value;
					this.SendPropertyChanged("LVL");
					this.OnLVLChanged();
				}
			}
		}
		
		[Column(Storage="_ServerID", DbType="Int")]
		public System.Nullable<int> ServerID
		{
			get
			{
				return this._ServerID;
			}
			set
			{
				if ((this._ServerID != value))
				{
					this.OnServerIDChanging(value);
					this.SendPropertyChanging();
					this._ServerID = value;
					this.SendPropertyChanged("ServerID");
					this.OnServerIDChanged();
				}
			}
		}
		
		[Column(Storage="_RegionID", DbType="Int")]
		public System.Nullable<int> RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDT", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDT
		{
			get
			{
				return this._CreateDT;
			}
			set
			{
				if ((this._CreateDT != value))
				{
					this.OnCreateDTChanging(value);
					this.SendPropertyChanging();
					this._CreateDT = value;
					this.SendPropertyChanged("CreateDT");
					this.OnCreateDTChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDT", DbType="DateTime NOT NULL")]
		public System.DateTime LastModifiedDT
		{
			get
			{
				return this._LastModifiedDT;
			}
			set
			{
				if ((this._LastModifiedDT != value))
				{
					this.OnLastModifiedDTChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDT = value;
					this.SendPropertyChanged("LastModifiedDT");
					this.OnLastModifiedDTChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Invites")]
	public partial class Invite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InviteID;
		
		private int _InviteType;
		
		private int _InviterMemberID;
		
		private System.DateTime _InviteDT;
		
		private string _InviteeEmailAddress;
		
		private System.Nullable<int> _EventID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInviteIDChanging(int value);
    partial void OnInviteIDChanged();
    partial void OnInviteTypeChanging(int value);
    partial void OnInviteTypeChanged();
    partial void OnInviterMemberIDChanging(int value);
    partial void OnInviterMemberIDChanged();
    partial void OnInviteDTChanging(System.DateTime value);
    partial void OnInviteDTChanged();
    partial void OnInviteeEmailAddressChanging(string value);
    partial void OnInviteeEmailAddressChanged();
    partial void OnEventIDChanging(System.Nullable<int> value);
    partial void OnEventIDChanged();
    #endregion
		
		public Invite()
		{
			OnCreated();
		}
		
		[Column(Storage="_InviteID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InviteID
		{
			get
			{
				return this._InviteID;
			}
			set
			{
				if ((this._InviteID != value))
				{
					this.OnInviteIDChanging(value);
					this.SendPropertyChanging();
					this._InviteID = value;
					this.SendPropertyChanged("InviteID");
					this.OnInviteIDChanged();
				}
			}
		}
		
		[Column(Storage="_InviteType", DbType="Int NOT NULL")]
		public int InviteType
		{
			get
			{
				return this._InviteType;
			}
			set
			{
				if ((this._InviteType != value))
				{
					this.OnInviteTypeChanging(value);
					this.SendPropertyChanging();
					this._InviteType = value;
					this.SendPropertyChanged("InviteType");
					this.OnInviteTypeChanged();
				}
			}
		}
		
		[Column(Storage="_InviterMemberID", DbType="Int NOT NULL")]
		public int InviterMemberID
		{
			get
			{
				return this._InviterMemberID;
			}
			set
			{
				if ((this._InviterMemberID != value))
				{
					this.OnInviterMemberIDChanging(value);
					this.SendPropertyChanging();
					this._InviterMemberID = value;
					this.SendPropertyChanged("InviterMemberID");
					this.OnInviterMemberIDChanged();
				}
			}
		}
		
		[Column(Storage="_InviteDT", DbType="DateTime NOT NULL")]
		public System.DateTime InviteDT
		{
			get
			{
				return this._InviteDT;
			}
			set
			{
				if ((this._InviteDT != value))
				{
					this.OnInviteDTChanging(value);
					this.SendPropertyChanging();
					this._InviteDT = value;
					this.SendPropertyChanged("InviteDT");
					this.OnInviteDTChanged();
				}
			}
		}
		
		[Column(Storage="_InviteeEmailAddress", DbType="VarChar(50)")]
		public string InviteeEmailAddress
		{
			get
			{
				return this._InviteeEmailAddress;
			}
			set
			{
				if ((this._InviteeEmailAddress != value))
				{
					this.OnInviteeEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._InviteeEmailAddress = value;
					this.SendPropertyChanged("InviteeEmailAddress");
					this.OnInviteeEmailAddressChanged();
				}
			}
		}
		
		[Column(Storage="_EventID", DbType="Int")]
		public System.Nullable<int> EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Events")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventID;
		
		private string _EventName;
		
		private System.DateTime _Date;
		
		private int _EventTypeID;
		
		private int _EventCreaterMemberID;
		
		private System.TimeSpan _EventTime;
		
		private string _MeetupLocation;
		
		private string _Notes;
		
		private int _GameID;
		
		private bool _Active;
		
		private System.Nullable<int> _ServerID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnEventNameChanging(string value);
    partial void OnEventNameChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnEventTypeIDChanging(int value);
    partial void OnEventTypeIDChanged();
    partial void OnEventCreaterMemberIDChanging(int value);
    partial void OnEventCreaterMemberIDChanged();
    partial void OnEventTimeChanging(System.TimeSpan value);
    partial void OnEventTimeChanged();
    partial void OnMeetupLocationChanging(string value);
    partial void OnMeetupLocationChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnServerIDChanging(System.Nullable<int> value);
    partial void OnServerIDChanged();
    #endregion
		
		public Event()
		{
			OnCreated();
		}
		
		[Column(Storage="_EventID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[Column(Storage="_EventName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EventName
		{
			get
			{
				return this._EventName;
			}
			set
			{
				if ((this._EventName != value))
				{
					this.OnEventNameChanging(value);
					this.SendPropertyChanging();
					this._EventName = value;
					this.SendPropertyChanged("EventName");
					this.OnEventNameChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_EventTypeID", DbType="Int NOT NULL")]
		public int EventTypeID
		{
			get
			{
				return this._EventTypeID;
			}
			set
			{
				if ((this._EventTypeID != value))
				{
					this.OnEventTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EventTypeID = value;
					this.SendPropertyChanged("EventTypeID");
					this.OnEventTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_EventCreaterMemberID", DbType="Int NOT NULL")]
		public int EventCreaterMemberID
		{
			get
			{
				return this._EventCreaterMemberID;
			}
			set
			{
				if ((this._EventCreaterMemberID != value))
				{
					this.OnEventCreaterMemberIDChanging(value);
					this.SendPropertyChanging();
					this._EventCreaterMemberID = value;
					this.SendPropertyChanged("EventCreaterMemberID");
					this.OnEventCreaterMemberIDChanged();
				}
			}
		}
		
		[Column(Storage="_EventTime", DbType="Time NOT NULL")]
		public System.TimeSpan EventTime
		{
			get
			{
				return this._EventTime;
			}
			set
			{
				if ((this._EventTime != value))
				{
					this.OnEventTimeChanging(value);
					this.SendPropertyChanging();
					this._EventTime = value;
					this.SendPropertyChanged("EventTime");
					this.OnEventTimeChanged();
				}
			}
		}
		
		[Column(Storage="_MeetupLocation", DbType="VarChar(50)")]
		public string MeetupLocation
		{
			get
			{
				return this._MeetupLocation;
			}
			set
			{
				if ((this._MeetupLocation != value))
				{
					this.OnMeetupLocationChanging(value);
					this.SendPropertyChanging();
					this._MeetupLocation = value;
					this.SendPropertyChanged("MeetupLocation");
					this.OnMeetupLocationChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="VarChar(200)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_ServerID", DbType="Int")]
		public System.Nullable<int> ServerID
		{
			get
			{
				return this._ServerID;
			}
			set
			{
				if ((this._ServerID != value))
				{
					this.OnServerIDChanging(value);
					this.SendPropertyChanging();
					this._ServerID = value;
					this.SendPropertyChanged("ServerID");
					this.OnServerIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.EventType")]
	public partial class EventType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventTypeID;
		
		private string _EventTypeName;
		
		private int _EventGroupSubTypeID;
		
		private System.Nullable<int> _GameID;
		
		private string _EventDescription;
		
		private int _PlayerCount;
		
		private string _Location;
		
		private string _AdditionalInfoLink;
		
		private string _SuggestedLvlRange;
		
		private string _ImageFile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventTypeIDChanging(int value);
    partial void OnEventTypeIDChanged();
    partial void OnEventTypeNameChanging(string value);
    partial void OnEventTypeNameChanged();
    partial void OnEventGroupSubTypeIDChanging(int value);
    partial void OnEventGroupSubTypeIDChanged();
    partial void OnGameIDChanging(System.Nullable<int> value);
    partial void OnGameIDChanged();
    partial void OnEventDescriptionChanging(string value);
    partial void OnEventDescriptionChanged();
    partial void OnPlayerCountChanging(int value);
    partial void OnPlayerCountChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnAdditionalInfoLinkChanging(string value);
    partial void OnAdditionalInfoLinkChanged();
    partial void OnSuggestedLvlRangeChanging(string value);
    partial void OnSuggestedLvlRangeChanged();
    partial void OnImageFileChanging(string value);
    partial void OnImageFileChanged();
    #endregion
		
		public EventType()
		{
			OnCreated();
		}
		
		[Column(Storage="_EventTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventTypeID
		{
			get
			{
				return this._EventTypeID;
			}
			set
			{
				if ((this._EventTypeID != value))
				{
					this.OnEventTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EventTypeID = value;
					this.SendPropertyChanged("EventTypeID");
					this.OnEventTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_EventTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EventTypeName
		{
			get
			{
				return this._EventTypeName;
			}
			set
			{
				if ((this._EventTypeName != value))
				{
					this.OnEventTypeNameChanging(value);
					this.SendPropertyChanging();
					this._EventTypeName = value;
					this.SendPropertyChanged("EventTypeName");
					this.OnEventTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_EventGroupSubTypeID", DbType="Int NOT NULL")]
		public int EventGroupSubTypeID
		{
			get
			{
				return this._EventGroupSubTypeID;
			}
			set
			{
				if ((this._EventGroupSubTypeID != value))
				{
					this.OnEventGroupSubTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EventGroupSubTypeID = value;
					this.SendPropertyChanged("EventGroupSubTypeID");
					this.OnEventGroupSubTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_GameID", DbType="Int")]
		public System.Nullable<int> GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[Column(Storage="_EventDescription", DbType="VarChar(200)")]
		public string EventDescription
		{
			get
			{
				return this._EventDescription;
			}
			set
			{
				if ((this._EventDescription != value))
				{
					this.OnEventDescriptionChanging(value);
					this.SendPropertyChanging();
					this._EventDescription = value;
					this.SendPropertyChanged("EventDescription");
					this.OnEventDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_PlayerCount", DbType="Int NOT NULL")]
		public int PlayerCount
		{
			get
			{
				return this._PlayerCount;
			}
			set
			{
				if ((this._PlayerCount != value))
				{
					this.OnPlayerCountChanging(value);
					this.SendPropertyChanging();
					this._PlayerCount = value;
					this.SendPropertyChanged("PlayerCount");
					this.OnPlayerCountChanged();
				}
			}
		}
		
		[Column(Storage="_Location", DbType="VarChar(50)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[Column(Storage="_AdditionalInfoLink", DbType="VarChar(100)")]
		public string AdditionalInfoLink
		{
			get
			{
				return this._AdditionalInfoLink;
			}
			set
			{
				if ((this._AdditionalInfoLink != value))
				{
					this.OnAdditionalInfoLinkChanging(value);
					this.SendPropertyChanging();
					this._AdditionalInfoLink = value;
					this.SendPropertyChanged("AdditionalInfoLink");
					this.OnAdditionalInfoLinkChanged();
				}
			}
		}
		
		[Column(Storage="_SuggestedLvlRange", DbType="VarChar(50)")]
		public string SuggestedLvlRange
		{
			get
			{
				return this._SuggestedLvlRange;
			}
			set
			{
				if ((this._SuggestedLvlRange != value))
				{
					this.OnSuggestedLvlRangeChanging(value);
					this.SendPropertyChanging();
					this._SuggestedLvlRange = value;
					this.SendPropertyChanged("SuggestedLvlRange");
					this.OnSuggestedLvlRangeChanged();
				}
			}
		}
		
		[Column(Storage="_ImageFile", DbType="VarChar(50)")]
		public string ImageFile
		{
			get
			{
				return this._ImageFile;
			}
			set
			{
				if ((this._ImageFile != value))
				{
					this.OnImageFileChanging(value);
					this.SendPropertyChanging();
					this._ImageFile = value;
					this.SendPropertyChanged("ImageFile");
					this.OnImageFileChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class SearchCharactersResult
	{
		
		private int _CharacterID;
		
		private int _MemberID;
		
		private int _GameID;
		
		private int _ClassID;
		
		private System.Nullable<int> _FactionID;
		
		private string _CharacterName;
		
		private System.Nullable<int> _LVL;
		
		private System.Nullable<int> _RoleGroupID;
		
		private System.Nullable<int> _ServerID;
		
		private System.Nullable<int> _RegionID;
		
		private int _ClassID1;
		
		private int _GameID1;
		
		private string _ClassName;
		
		private System.Nullable<int> _FactionID1;
		
		private string _ImageLocation;
		
		private int _FactionID2;
		
		private int _GameID2;
		
		private string _FactionName;
		
		private int _ServerID1;
		
		private string _Name;
		
		private System.Nullable<int> _RegionID1;
		
		private System.Nullable<int> _GameID3;
		
		public SearchCharactersResult()
		{
		}
		
		[Column(Storage="_CharacterID", DbType="Int NOT NULL")]
		public int CharacterID
		{
			get
			{
				return this._CharacterID;
			}
			set
			{
				if ((this._CharacterID != value))
				{
					this._CharacterID = value;
				}
			}
		}
		
		[Column(Storage="_MemberID", DbType="Int NOT NULL")]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					this._MemberID = value;
				}
			}
		}
		
		[Column(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this._GameID = value;
				}
			}
		}
		
		[Column(Storage="_ClassID", DbType="Int NOT NULL")]
		public int ClassID
		{
			get
			{
				return this._ClassID;
			}
			set
			{
				if ((this._ClassID != value))
				{
					this._ClassID = value;
				}
			}
		}
		
		[Column(Storage="_FactionID", DbType="Int")]
		public System.Nullable<int> FactionID
		{
			get
			{
				return this._FactionID;
			}
			set
			{
				if ((this._FactionID != value))
				{
					this._FactionID = value;
				}
			}
		}
		
		[Column(Storage="_CharacterName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CharacterName
		{
			get
			{
				return this._CharacterName;
			}
			set
			{
				if ((this._CharacterName != value))
				{
					this._CharacterName = value;
				}
			}
		}
		
		[Column(Storage="_LVL", DbType="Int")]
		public System.Nullable<int> LVL
		{
			get
			{
				return this._LVL;
			}
			set
			{
				if ((this._LVL != value))
				{
					this._LVL = value;
				}
			}
		}
		
		[Column(Storage="_RoleGroupID", DbType="Int")]
		public System.Nullable<int> RoleGroupID
		{
			get
			{
				return this._RoleGroupID;
			}
			set
			{
				if ((this._RoleGroupID != value))
				{
					this._RoleGroupID = value;
				}
			}
		}
		
		[Column(Storage="_ServerID", DbType="Int")]
		public System.Nullable<int> ServerID
		{
			get
			{
				return this._ServerID;
			}
			set
			{
				if ((this._ServerID != value))
				{
					this._ServerID = value;
				}
			}
		}
		
		[Column(Storage="_RegionID", DbType="Int")]
		public System.Nullable<int> RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					this._RegionID = value;
				}
			}
		}
		
		[Column(Storage="_ClassID1", DbType="Int NOT NULL")]
		public int ClassID1
		{
			get
			{
				return this._ClassID1;
			}
			set
			{
				if ((this._ClassID1 != value))
				{
					this._ClassID1 = value;
				}
			}
		}
		
		[Column(Storage="_GameID1", DbType="Int NOT NULL")]
		public int GameID1
		{
			get
			{
				return this._GameID1;
			}
			set
			{
				if ((this._GameID1 != value))
				{
					this._GameID1 = value;
				}
			}
		}
		
		[Column(Storage="_ClassName", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this._ClassName = value;
				}
			}
		}
		
		[Column(Storage="_FactionID1", DbType="Int")]
		public System.Nullable<int> FactionID1
		{
			get
			{
				return this._FactionID1;
			}
			set
			{
				if ((this._FactionID1 != value))
				{
					this._FactionID1 = value;
				}
			}
		}
		
		[Column(Storage="_ImageLocation", DbType="VarChar(50)")]
		public string ImageLocation
		{
			get
			{
				return this._ImageLocation;
			}
			set
			{
				if ((this._ImageLocation != value))
				{
					this._ImageLocation = value;
				}
			}
		}
		
		[Column(Storage="_FactionID2", DbType="Int NOT NULL")]
		public int FactionID2
		{
			get
			{
				return this._FactionID2;
			}
			set
			{
				if ((this._FactionID2 != value))
				{
					this._FactionID2 = value;
				}
			}
		}
		
		[Column(Storage="_GameID2", DbType="Int NOT NULL")]
		public int GameID2
		{
			get
			{
				return this._GameID2;
			}
			set
			{
				if ((this._GameID2 != value))
				{
					this._GameID2 = value;
				}
			}
		}
		
		[Column(Storage="_FactionName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FactionName
		{
			get
			{
				return this._FactionName;
			}
			set
			{
				if ((this._FactionName != value))
				{
					this._FactionName = value;
				}
			}
		}
		
		[Column(Storage="_ServerID1", DbType="Int NOT NULL")]
		public int ServerID1
		{
			get
			{
				return this._ServerID1;
			}
			set
			{
				if ((this._ServerID1 != value))
				{
					this._ServerID1 = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_RegionID1", DbType="Int")]
		public System.Nullable<int> RegionID1
		{
			get
			{
				return this._RegionID1;
			}
			set
			{
				if ((this._RegionID1 != value))
				{
					this._RegionID1 = value;
				}
			}
		}
		
		[Column(Storage="_GameID3", DbType="Int")]
		public System.Nullable<int> GameID3
		{
			get
			{
				return this._GameID3;
			}
			set
			{
				if ((this._GameID3 != value))
				{
					this._GameID3 = value;
				}
			}
		}
	}
	
	public partial class SearchEventsResult
	{
		
		private int _EventID;
		
		private string _EventName;
		
		private System.DateTime _Date;
		
		private int _EventTypeID;
		
		private System.Nullable<int> _EventRestrictionsID;
		
		private int _EventCreaterMemberID;
		
		private System.TimeSpan _EventTime;
		
		private string _MeetupLocation;
		
		private string _Notes;
		
		private int _GameID;
		
		private bool _Active;
		
		private string _EventTypeName;
		
		private int _PlayerCount;
		
		public SearchEventsResult()
		{
		}
		
		[Column(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this._EventID = value;
				}
			}
		}
		
		[Column(Storage="_EventName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EventName
		{
			get
			{
				return this._EventName;
			}
			set
			{
				if ((this._EventName != value))
				{
					this._EventName = value;
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		[Column(Storage="_EventTypeID", DbType="Int NOT NULL")]
		public int EventTypeID
		{
			get
			{
				return this._EventTypeID;
			}
			set
			{
				if ((this._EventTypeID != value))
				{
					this._EventTypeID = value;
				}
			}
		}
		
		[Column(Storage="_EventRestrictionsID", DbType="Int")]
		public System.Nullable<int> EventRestrictionsID
		{
			get
			{
				return this._EventRestrictionsID;
			}
			set
			{
				if ((this._EventRestrictionsID != value))
				{
					this._EventRestrictionsID = value;
				}
			}
		}
		
		[Column(Storage="_EventCreaterMemberID", DbType="Int NOT NULL")]
		public int EventCreaterMemberID
		{
			get
			{
				return this._EventCreaterMemberID;
			}
			set
			{
				if ((this._EventCreaterMemberID != value))
				{
					this._EventCreaterMemberID = value;
				}
			}
		}
		
		[Column(Storage="_EventTime", DbType="Time NOT NULL")]
		public System.TimeSpan EventTime
		{
			get
			{
				return this._EventTime;
			}
			set
			{
				if ((this._EventTime != value))
				{
					this._EventTime = value;
				}
			}
		}
		
		[Column(Storage="_MeetupLocation", DbType="VarChar(50)")]
		public string MeetupLocation
		{
			get
			{
				return this._MeetupLocation;
			}
			set
			{
				if ((this._MeetupLocation != value))
				{
					this._MeetupLocation = value;
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="VarChar(200)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this._Notes = value;
				}
			}
		}
		
		[Column(Storage="_GameID", DbType="Int NOT NULL")]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this._GameID = value;
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this._Active = value;
				}
			}
		}
		
		[Column(Storage="_EventTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EventTypeName
		{
			get
			{
				return this._EventTypeName;
			}
			set
			{
				if ((this._EventTypeName != value))
				{
					this._EventTypeName = value;
				}
			}
		}
		
		[Column(Storage="_PlayerCount", DbType="Int NOT NULL")]
		public int PlayerCount
		{
			get
			{
				return this._PlayerCount;
			}
			set
			{
				if ((this._PlayerCount != value))
				{
					this._PlayerCount = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
